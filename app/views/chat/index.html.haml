%script(src="http://crypto-js.googlecode.com/svn/tags/3.0.2/build/rollups/md5.js")
%script(src="/howler.min.js")
%script(src="//cdnjs.cloudflare.com/ajax/libs/react/0.8.0/JSXTransformer.js")
%script(src="//cdnjs.cloudflare.com/ajax/libs/react/0.8.0/react-with-addons.js")

%h1.hidden-xs Chat #{params[:room]}

:css
	.chatmessage { font-family: Courier; background-color: attr(data-usercolor color); }
	.chatmessage .timestamp { float:left; min-width: 80px; font-weight: bold; }
	.chatmessage .nickname { float: left; min-width: 110px; font-weight: bold; }
	.chatform {}

.chatbox

/
	runCommands = (set) =>
	for m in set
	flash() if m.message == "FLASH" and m.admin == true
	window.location.reload() if m.message == "RELOAD" and m.admin == true
	window.location = m.message.substr(9) if m.message.indexOf("REDIRECT") == 0
	sound.play() if m.message.indexOf("BEEP") == 0


:plain
	<script type="text/jsx">
	/** @jsx React.DOM */

	var ChatForm = React.createClass({
		handleAutofocus: function() {
			if (this.props.autofocus && document.activeElement != this.refs.message.getDOMNode()) {
				$(this.refs.message.getDOMNode()).focus();
			}
		},
		handleSubmit: function() {
			var message = this.refs.message.getDOMNode().value.trim();
			if (!message) { return false; }
			this.props.onMessageSubmit(message);
			this.refs.message.getDOMNode().value='';
			return false;
		},
		componentDidMount: function() {
			$(document).click(this.handleAutofocus);
			this.handleAutofocus();
		},
		render: function() {
			return(
				<form className="chatform" onSubmit={this.handleSubmit}>
					<input className="form-control" type="text" placeholder="your funny message" ref="message" onClick={this.handleSubmit} />
				</form>
			);
		}
	});

	var ChatBox = React.createClass({
		refresh: function() {
			$.ajax({
				url: window.location + "/refresh/"+this.state.lastid,
				dataType: 'json',
				success: function(data) {
					if (data.messages.length == 0) { return; }
					while (this.state.messages.length > 0 && this.state.messages[this.state.messages.length-1].id == -1)
						this.state.messages.pop()
					this.setState({lastid: data.messages[data.messages.length-1].id, messages: this.state.messages.concat(data.messages)});
				}.bind(this),
				error: function(xhr, status, err) {
					console.error(this.props.url, status, err.toString());
				}.bind(this)
			});
		},
		handleMessageSubmit: function(message) {
			var messages=this.state.messages;
			var newMessages=messages.concat([{
				nickname: 'sending', 
				datetime: Math.floor(new Date().getTime()/1000), 
				message: message, 
				id:-1
			}])
			this.setState({ 
				lastid: this.state.lastid,
				messages: newMessages 
			});
			$.post(window.location,{ msg: message });
		},
		getInitialState: function() {
			return { lastid: 0, messages: [] };
		},
		componentWillMount: function() {
			setInterval(this.refresh, this.props.pollInterval);
			this.refresh();
		},
		render: function() {
			return (
				<div className="chatbox">
					<ChatList messages={this.state.messages} />
					<ChatForm onMessageSubmit={this.handleMessageSubmit} autofocus={true} />
				</div>
			);
		}
	});

	var ChatList = React.createClass({
		scrollDown: function() {
			var wrapper = $(this.refs.wrapper.getDOMNode());
			wrapper.scrollTop(wrapper[0].scrollHeight);
		},
		handleResize: function() {
			var wrapper = $(this.refs.wrapper.getDOMNode());
			wrapper.height("auto");
			wrapper.height($(window).innerHeight() - ($("body").height() - wrapper.height()) - 15);
			this.scrollDown();
		},
		componentDidUpdate: function(a,b) { 
			this.scrollDown(); 
		},
		componentDidMount: function() {
			$(window).resize(this.handleResize);
			this.handleResize();
		},
		render: function() {
			var list_messages = this.props.messages.map(function (comment) {
				return <ChatMessage id={comment.id} nickname={comment.nickname} timestamp={comment.datetime}>{comment.message}</ChatMessage>;
			});
			return (
				<div style={{"overflow-y": "scroll"}} ref="wrapper">
					<div className="chatlist">{ list_messages }</div>
				</div>
			);
		}
	})

	var ChatMessage = React.createClass({
		render: function() {
			return (
				<div className="chatmessage" style={{"background-color": window.stringColor(this.props.nickname, true, 0.15, 0.99)}}>
					<div className="timestamp">{ moment(new Date(Number(this.props.timestamp)*1000)).format("HH:mm:ss") }</div>
					<div className="nickname">{ "<"+this.props.nickname.substr(0,10)+">" }</div>
					<div className="message">{ this.props.children }</div>
				</div>
			);
		}
	});

	React.renderComponent(
	  	<ChatBox pollInterval="1000"></ChatBox>
	  ,
	  $('.chatbox')[0]
	);
	</script>
